

AWSTemplateFormatVersion: 2010-09-09
Description: |
  Standalone security group

Parameters:

  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to SSH to the EC2 instances
    MaxLength: '18'
    MinLength: '9'
    Type: String
  
Resources:
  SecurityGroupHTTPFromWorld:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows port 80 from the world
      GroupName: !Sub 'HTTPFromAnywhere-${AWS::StackId}'
      VpcId: !ImportValue vpc-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: 
            Fn::GetAtt:
            - ELBSecurityGroup
            - GroupId
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: 
            Fn::GetAtt:
            - ELBSecurityGroup
            - GroupId



  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: DBSecurityGroup
      GroupDescription: DB Security Group
      VpcId: !ImportValue vpc-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref SecurityGroupHTTPFromWorld

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ELB Security Group
      VpcId: !ImportValue vpc-VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

Outputs:
  AppSecurityGroupId:
    Value: !GetAtt SecurityGroupHTTPFromWorld.GroupId
    Export: 
      Name: !Sub '${AWS::StackName}-AppSecurityGroup'

  DBSecurityGroupId:
    Value: !GetAtt DBSecurityGroup.GroupId
    Export: 
      Name: !Sub '${AWS::StackName}-DBSecurityGroup'
  
  ELBSecurityGroup:
    Value: !GetAtt ELBSecurityGroup.GroupId
    Export: 
      Name: !Sub '${AWS::StackName}-ELBSecurityGroup'